.if not_defined,_3DFX_MAC_
_3DFX_MAC_ == 0
;
.if not_defined, SST_BASE
	HEX_CONST SST_BASE	(0xA8000000)	< Address of 3DFX board >
.endc
REM <	Color pair constants>
; >>-> Set appropriately for your game
.if not_defined, DYNAMIC_VIS_PIX
	DYNAMIC_VIS_PIX == 0
.endc
.if true, DYNAMIC_VIS_PIX
 .if not_defined,VIS_H_PIX_MAX
	DEC_CONST VIS_H_PIX_MAX	640
 .endc
 .if not_defined,VIS_V_PIX_MAX
	DEC_CONST VIS_H_PIX_MAX	480
 .endc
 .if true, OUTPUT_LANG == LANG_C
extern int SST_RESOLUTION, VIS_V_PIX, VIS_H_PIX, AN_VIS_COL, AN_VIS_ROW;
#define AN_VIS_COL_MAX (VIS_H_PIX_MAX/8)
#define AN_VIS_ROW_MAX (VIS_V_PIX_MAX/8)
 .endc
.iff
 .if defined, VIS_H_PIX_MAX
  .if not_defined, VIS_H_PIX
	DEC_CONST VIS_H_PIX VIS_H_PIX_MAX
  .endc
 .iff
  .if not_defined, VIS_H_PIX
	DEC_CONST VIS_H_PIX	640
  .endc
	DEC_CONST VIS_H_PIX_MAX	VIS_H_PIX
 .endc
 .if defined, VIS_V_PIX_MAX
  .if not_defined, VIS_V_PIX
	DEC_CONST VIS_V_PIX VIS_V_PIX_MAX
  .endc
 .iff
  .if not_defined, VIS_V_PIX
	DEC_CONST VIS_V_PIX	480
  .endc
	DEC_CONST VIS_V_PIX_MAX	VIS_V_PIX
 .endc
	DEC_CONST AN_VIS_COL 	(VIS_H_PIX/8)
	DEC_CONST AN_VIS_ROW 	(VIS_V_PIX/8)
	DEC_CONST AN_VIS_COL_MAX (VIS_H_PIX_MAX/8)
	DEC_CONST AN_VIS_ROW_MAX (VIS_V_PIX_MAX/8)
.endc
	HEX_CONST TOT_H_PIX	1024.	< pixel count to next line	>
	HEX_CONST TOT_V_PIX	1024.	< Total vertical screen size	>
;
	HEX_CONST RED_LSB	0x0400		< RED gun LSB		>
	HEX_CONST GRN_LSB	0x0020		< GREEN gun LSB		>
	HEX_CONST BLU_LSB	0x0001		< BLUE gun LSB		>
	HEX_CONST ALL_LSB	<RED_LSB | GRN_LSB | BLU_LSB>
	HEX_CONST INTEN_MSK	0x8000		< INTENSITY MASK	>
;
	HEX_CONST RED_MSK	0x7C00		< RED INTENSITY MASK	>
	HEX_CONST GRN_MSK	0x03E0		< GREEN INTENSITY MASK	>
	HEX_CONST BLU_MSK	0x001F		< BLUE INTENSITY MASK	>
	HEX_CONST RED_SHF	10.		< RED INTENSITY SHIFT	>
	HEX_CONST GRN_SHF	5		< GREEN INTENSITY SHIFT	>
	HEX_CONST BLU_SHF	0		< BLUE INTENSITY SHIFT	>
;
	HEX_CONST ALL_MSK	<RED_MSK | GRN_MSK | BLU_MSK>
	HEX_CONST BITS_PER_GUN	5		< # of bits/gun	>
;
	HEX_CONST YEL_MSK	<RED_MSK | GRN_MSK>
	HEX_CONST CYN_MSK	<GRN_MSK | BLU_MSK>
	HEX_CONST VIO_MSK	<RED_MSK | BLU_MSK>
	HEX_CONST RED_QTR	((RED_MSK+RED_LSB)>>2)
	HEX_CONST GRN_QTR	((GRN_MSK+GRN_LSB)>>2)
	HEX_CONST BLU_QTR	((BLU_MSK+BLU_LSB)>>2)
	HEX_CONST WHT_FUL	(ALL_MSK-RED_QTR-GRN_QTR-BLU_QTR)
	HEX_CONST SLT_FUL	(ALL_MSK-(2*(RED_QTR+GRN_QTR+BLU_QTR)))
	HEX_CONST GRY_FUL	(ALL_MSK-(3*(RED_QTR+GRN_QTR+BLU_QTR)))
	HEX_CONST GRY_BAK	(GRY_FUL<<16.)
;
	HEX_CONST BLK_SLT	SLT_FUL		< Slate on black	>
	HEX_CONST BLK_WHT	WHT_FUL		< White on black	>
	HEX_CONST BLK_YEL	YEL_MSK		< Yellow on Black	>
	HEX_CONST BLK_RED	RED_MSK		< Red on black		>
	HEX_CONST BLK_GRN	GRN_MSK		< Green on Black	>
	HEX_CONST BLK_CYN	CYN_MSK		< Cyan on black		>
	HEX_CONST BLK_VIO	VIO_MSK		< Violet on black	>
	HEX_CONST BLK_BLU	BLU_MSK		< Blue on black		>
	HEX_CONST GRY_SLT	<GRY_BAK + SLT_FUL>
	HEX_CONST GRY_WHT	<GRY_BAK + WHT_FUL>
	HEX_CONST GRY_YEL 	<GRY_BAK + YEL_MSK>
	HEX_CONST GRY_RED	<GRY_BAK + RED_MSK>
	HEX_CONST GRY_GRN	<GRY_BAK + GRN_MSK>
	HEX_CONST GRY_CYN	<GRY_BAK + CYN_MSK>
	HEX_CONST GRY_VIO	<GRY_BAK + VIO_MSK>
	HEX_CONST GRY_BLU	<GRY_BAK + BLU_MSK>
;
.if not_defined, DYNAMIC_VIS_PIX
 .if not_defined, AN_VIS_COL
	HEX_CONST AN_VIS_COL	VIS_H_PIX/8	< AN visible stamps horiz.	>
 .endc
 .if not_defined, AN_VIS_ROW
	HEX_CONST AN_VIS_ROW	VIS_V_PIX/8	< AN visible stamps vert.	>
 .endc
.endc
;
	HEX_CONST AN_A_STMP	0x47	< code for 'A' stamp		>
	HEX_CONST AN_SQUARE	0x3	< AN stamp # completely filled	>
	HEX_CONST AN_BORDER	AN_SQUARE
	HEX_CONST AN_VOL_BAR	0x11E	< AN stamp for volume stamp	>
;
	HEX_CONST BGBIT		0x8000
	HEX_CONST AN_PAL_MSK	0x7C00
	HEX_CONST AN_PAL_SHF	0xA
	HEX_CONST AN_NXT_PAL	(1<<AN_PAL_SHF)
	HEX_CONST GRY_PAL	0		< GREY is palette 0	>
	HEX_CONST GRY_PALB	(GRY_PAL|BGBIT)
	HEX_CONST BLU_PAL	(1<<AN_PAL_SHF)	< BLUE is palette 1	>
	HEX_CONST BLU_PALB	(BLU_PAL|BGBIT)
	HEX_CONST GRN_PAL	(2<<AN_PAL_SHF)	< GREEN is palette 2	>
	HEX_CONST GRN_PALB	(GRN_PAL|BGBIT)
	HEX_CONST CYN_PAL	(3<<AN_PAL_SHF)	< CYAN is palette 3	>
	HEX_CONST CYN_PALB	(CYN_PAL|BGBIT)
	HEX_CONST RED_PAL	(4<<AN_PAL_SHF)	< RED is palette 4	>
	HEX_CONST RED_PALB	(RED_PAL|BGBIT)
	HEX_CONST VIO_PAL	(5<<AN_PAL_SHF)	< VIOLET is palette 5	>
	HEX_CONST VIO_PALB	(VIO_PAL|BGBIT)
	HEX_CONST YEL_PAL	(6<<AN_PAL_SHF)	< YELLOW is palette 6	>
	HEX_CONST YEL_PALB	(YEL_PAL|BGBIT)
	HEX_CONST WHT_PAL	(7<<AN_PAL_SHF)	< WHITE is palette 7	>
	HEX_CONST WHT_PALB	(WHT_PAL|BGBIT)
;
	HEX_CONST BOLD_FONT	(1)
	HEX_CONST UL_FONT	(2)
	HEX_CONST REVERSE_FONT	(4)
	HEX_CONST NORMAL_FONT	(0)
	HEX_CONST MNORMAL_PAL NORMAL_FONT
	HEX_CONST TITLE_PAL	RED_PALB
	HEX_CONST INSTR_PAL	GRN_PALB
	HEX_CONST BORDER_PAL	RED_PAL
	HEX_CONST VERSION_PAL	CYN_PALB
	HEX_CONST MHILITE_PAL	YEL_PALB
	HEX_CONST MNORMAL_PAL	GRY_PAL
	HEX_CONST ERROR_PAL	RED_PALB
;
REM <	MESSAGE ROUTINE CONFIGURATION>
	HEX_CONST MAX_MESS	3	< maximum # of special message types	>
	HEX_CONST BIG_CHAR	0x0080	< BIG character bit offset		>
	HEX_CONST COLMSK	<BGBIT | AN_PAL_MSK>	< palette mask+bgbit	>
	HEX_CONST SETMSK	0x0003	< character set mask	>
	HEX_CONST AN_SET0	0x0000		
	HEX_CONST AN_SET1	0x0001
	HEX_CONST AN_SET2	0x0002
	HEX_CONST AN_BIG_SET	0x0003
;
.endc				; _3DFX_MAC_
