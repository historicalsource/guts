.if not_defined, _GENERIC_SWITCHES_MAC_
_GENERIC_SWITCHES_MAC_ == 0
;
REM <	SELFTEST switch definitions >
;
	VAR	  INPUTS	VU16	IO_PLAYER_21
	VAR	  EXTEND	VU16	IO_PLAYER_43
	VAR	  MISC		VU16	IO_MISC
	VAR	  DIAG		VU16	IO_DIPSW
;
	VAR	  TEST		VU16	IO_MISC
	HEX_CONST B_TEST	4
;
; Where they go in the switch word.
;
	HEX_CONST SH_INPUTS	0
	HEX_CONST SH_EXTEND	16
	HEX_CONST SH_MISC	0
	HEX_CONST SH_DIAG	16
;
.if true, OUTPUT_LANG == LANG_C
#define INPUT_SWITCHES ( INPUTS << SH_INPUTS )
#define EXTEND_SWITCHES ( EXTEND << SH_EXTEND )
#define MISC_SWITCHES ( MISC << SH_MISC )
#define DIAG_SWITCHES ( DIAG << SH_DIAG )
#define READ_RAW_SWITCHES(x) ( (x) ?\
			    ~( DIAG_SWITCHES | MISC_SWITCHES )  : \
			    ~( EXTEND_SWITCHES | INPUT_SWITCHES ) )
.endc
;
	HEX_CONST SW_EDGES	0xFFFFFFFF
	HEX_CONST SW_LEVELS	0x00000000
;
REM <	SELFTEST switch definitions >
;
; DIP Switches
;
	HEX_CONST SW_OPT0	(IO_DIPSW0<<SH_DIAG)
	HEX_CONST SW_OPT1	(IO_DIPSW1<<SH_DIAG)
	HEX_CONST SW_OPT2	(IO_DIPSW2<<SH_DIAG)
	HEX_CONST SW_OPT3	(IO_DIPSW3<<SH_DIAG)
	HEX_CONST SW_OPT4	(IO_DIPSW4<<SH_DIAG)
	HEX_CONST SW_OPT5	(IO_DIPSW5<<SH_DIAG)
	HEX_CONST SW_OPT6	(IO_DIPSW6<<SH_DIAG)
	HEX_CONST SW_OPT7	(IO_DIPSW7<<SH_DIAG)
	HEX_CONST SW_OPT8	(IO_DIPSW8<<SH_DIAG)
	HEX_CONST SW_OPT9	(IO_DIPSW9<<SH_DIAG)
	HEX_CONST SW_OPT10	(IO_DIPSW10<<SH_DIAG)
	HEX_CONST SW_OPT11	(IO_DIPSW11<<SH_DIAG)
	HEX_CONST SW_OPT12	(IO_DIPSW12<<SH_DIAG)
	HEX_CONST SW_OPT13	(IO_DIPSW13<<SH_DIAG)
	HEX_CONST SW_OPT14	(IO_DIPSW14<<SH_DIAG)
	HEX_CONST SW_OPT15	(IO_DIPSW15<<SH_DIAG)
;
	HEX_CONST SW_BITS	0xFFFFFFFF
;
; Misc switches
;
	HEX_CONST SW_COIN1	(IO_MISC0<<SH_MISC)
	HEX_CONST SW_COIN2	(IO_MISC1<<SH_MISC)
	HEX_CONST SW_P1START	(IO_MISC2<<SH_MISC)
	HEX_CONST SW_TILT	(IO_MISC3<<SH_MISC)
	HEX_CONST SW_TEST	(IO_MISC4<<SH_MISC)
	HEX_CONST SW_P2START	(IO_MISC5<<SH_MISC)
	HEX_CONST SW_CREDIT	(IO_MISC6<<SH_MISC)
	HEX_CONST SW_COIN3	(IO_MISC7<<SH_MISC)
	HEX_CONST SW_COIN4	(IO_MISC8<<SH_MISC)
	HEX_CONST SW_P3START	(IO_MISC9<<SH_MISC)
	HEX_CONST SW_P4START	(IO_MISC10<<SH_MISC)
	HEX_CONST SW_VOLM	(IO_MISC11<<SH_MISC)
	HEX_CONST SW_VOLP	(IO_MISC12<<SH_MISC)
	HEX_CONST SW_UNUSED0	(IO_MISC13<<SH_MISC)
	HEX_CONST SW_INTER	(IO_MISC14<<SH_MISC)
	HEX_CONST SW_BILL	(IO_MISC15<<SH_MISC)
;
; Coin stuff
;
.if true, OUTPUT_LANG == LANG_C
#ifndef IO_METER_T
# define IO_METER_T	*(VU32*)IO_METER
#endif
# define COUNTER_ON(x)	do { IO_METER_T = 0x10; IO_METER_T |= 1<<(x); } while (0)
# define COUNTER_OFF(x)	do { IO_METER_T = 0x10; IO_METER_T &= ~(1<<(x)); } while (0)

#define B_COINL		(0)		/* COIN LEFT */
#define B_COINR		(1)		/* COIN RIGHT */
#define B_COIN3		(2)		/* COIN 3 */
#define B_COIN4		(3)		/* COIN 4 */
#define B_CREDIT	(6)		/* FE's Coin switch */
#define B_DOLLAR	(7)		/* Dollar acceptor */
#define CN_STATUS	((MISC&0x43)|((MISC&0x8000)>>8)|((MISC&0x180)>>5))
.endc		; LANG_C
;
	HEX_CONST J1_UP		(IO_PLYR1_0<<SH_INPUTS)	< SW07 >
	HEX_CONST J1_DOWN	(IO_PLYR1_1<<SH_INPUTS)	< SW06 >
	HEX_CONST J1_LEFT	(IO_PLYR1_2<<SH_INPUTS)	< SW05 >
	HEX_CONST J1_RIGHT	(IO_PLYR1_3<<SH_INPUTS)	< SW04 >
	HEX_CONST J2_UP		(IO_PLYR2_0<<SH_INPUTS)
	HEX_CONST J2_DOWN	(IO_PLYR2_1<<SH_INPUTS)
	HEX_CONST J2_LEFT	(IO_PLYR2_2<<SH_INPUTS)
	HEX_CONST J2_RIGHT	(IO_PLYR2_3<<SH_INPUTS)
	HEX_CONST J3_UP		(IO_PLYR3_0<<SH_EXTEND)	< SW07 >
	HEX_CONST J3_DOWN	(IO_PLYR3_1<<SH_EXTEND)	< SW06 >
	HEX_CONST J3_LEFT	(IO_PLYR3_2<<SH_EXTEND)	< SW05 >
	HEX_CONST J3_RIGHT	(IO_PLYR3_3<<SH_EXTEND)	< SW04 >
	HEX_CONST J4_UP		(IO_PLYR4_0<<SH_EXTEND)
	HEX_CONST J4_DOWN	(IO_PLYR4_1<<SH_EXTEND)
	HEX_CONST J4_LEFT	(IO_PLYR4_2<<SH_EXTEND)
	HEX_CONST J4_RIGHT	(IO_PLYR4_3<<SH_EXTEND)
	HEX_CONST J_UP		<J1_UP | J2_UP | J3_UP | J4_UP>
	HEX_CONST J_DOWN	<J1_DOWN | J2_DOWN | J3_DOWN | J3_DOWN>
	HEX_CONST J_LEFT	<J1_LEFT | J2_LEFT | J3_LEFT | J3_LEFT>
	HEX_CONST J_RIGHT	<J1_RIGHT | J2_RIGHT | J3_RIGHT | J3_RIGHT>
;
; Toggles
;
REM <	J_LEFT/RIGHT, JOY_ defs moved below so the can use SW_ defs	>
;
	HEX_CONST J1_VERT	<J1_UP | J1_DOWN>
	HEX_CONST J1_BITS	<J1_UP | J1_DOWN | J1_LEFT | J1_RIGHT>
;
	HEX_CONST J2_VERT	<J2_UP | J2_DOWN>
	HEX_CONST J2_BITS	<J2_UP | J2_DOWN | J2_LEFT | J2_RIGHT>
;
	HEX_CONST J3_VERT	<J3_UP | J3_DOWN>
	HEX_CONST J3_BITS	<J3_UP | J3_DOWN | J3_LEFT | J3_RIGHT>
;
	HEX_CONST J4_VERT	<J4_UP | J4_DOWN>
	HEX_CONST J4_BITS	<J4_UP | J4_DOWN | J4_LEFT | J4_RIGHT>
;
	HEX_CONST JOY_BITS	<J_UP | J_DOWN | J_LEFT | J_RIGHT>
	HEX_CONST JOY_VERT	<J_UP | J_DOWN>
;
	HEX_CONST P1_START	IO_MISC2<<SH_MISC
	HEX_CONST P2_START	IO_MISC5<<SH_MISC
	HEX_CONST P3_START	IO_MISC9<<SH_MISC
	HEX_CONST P4_START	IO_MISC10<<SH_MISC
	HEX_CONST P1_A		IO_PLYR1_4<<SH_INPUTS
	HEX_CONST P1_B		IO_PLYR1_5<<SH_INPUTS
	HEX_CONST P1_C		IO_PLYR1_6<<SH_INPUTS
	HEX_CONST P1_D		IO_PLYR1_7<<SH_INPUTS
	HEX_CONST P2_A		IO_PLYR2_4<<SH_INPUTS
	HEX_CONST P2_B		IO_PLYR2_5<<SH_INPUTS
	HEX_CONST P2_C		IO_PLYR2_6<<SH_INPUTS
	HEX_CONST P2_D		IO_PLYR2_7<<SH_INPUTS
	HEX_CONST P3_A		IO_PLYR3_4<<SH_EXTEND
	HEX_CONST P3_B		IO_PLYR3_5<<SH_EXTEND
	HEX_CONST P3_C		IO_PLYR3_6<<SH_EXTEND
	HEX_CONST P3_D		IO_PLYR3_7<<SH_EXTEND
	HEX_CONST P4_A		IO_PLYR4_4<<SH_EXTEND
	HEX_CONST P4_B		IO_PLYR4_5<<SH_EXTEND
	HEX_CONST P4_C		IO_PLYR4_6<<SH_EXTEND
	HEX_CONST P4_D		IO_PLYR4_7<<SH_EXTEND
;
	HEX_CONST SW_NEXT	(P1_A|P2_A)		< Player A >
	HEX_CONST SW_ACTION	(P1_B|P2_B)		< Player B >
	HEX_CONST SW_EXTRA	(P1_C|P2_C)		< Player C >
;
	HEX_CONST JOY_ALL	<JOY_BITS | SW_NEXT | SW_ACTION>
	HEX_CONST SW_ALL	<SW_ACTION | SW_NEXT | SW_EXTRA>
	HEX_CONST SW_BITS	0xFFFFFFFF
;
	HEX_CONST LA_START      0x01
	HEX_CONST LA_VIEW1      0x02
	HEX_CONST LA_VIEW2      0x04
	HEX_CONST LA_VIEW3      0x08
	HEX_CONST LA_WINNER     0x40
	HEX_CONST LA_LEADER     0x80
;
.endc		; _GENERIC_SWITCHES_MAC_
